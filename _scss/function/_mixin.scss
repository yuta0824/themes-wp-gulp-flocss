@use './setting' as *;

//メディアクエリー
@mixin mq($breakpoint: sp) {
  @media screen and #{map-get($breakpoints, $breakpoint)} {
    @content;
  }
}

//3点リーダーの記述
@mixin line-clamp($count: 3) {
  @if $count == 1 {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $count;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

//マップやYouTubeの埋め込み
@mixin aspect-ratio($width, $height) {
  position: relative;

  &::before {
    content: "";
    float: left;
    padding-top: ($height / $width) * 100%;
  }

  &::after {
    content: "";
    display: block;
    clear: both;
  }

  & > :first-child {
    height: 100%;
    left: 0;
    position: absolute;
    top: 0;
    width: 100%;
  }
}

//三角形の作成
@mixin triangle($direction, $width, $height, $color: currentColor) {
  // 定義されている方向が指定されている、もしくは方向が指定されていなかったらエラーを返す
  @if not
    index(
      up right down left upper-left upper-right lower-right lower-left,
      $direction
    )
  {
    @error 'triangle()の方向は"up","right","down","left","upper-left","upper-right","lower-right","lower-left"から指定してください';
  }

  border-style: solid;
  height: 0;
  width: 0;

  @if $direction == up {
    border-color: transparent transparent $color transparent;
    border-width: 0 ($width / 2) $height ($width / 2);
  }

  @if $direction == right {
    border-color: transparent transparent transparent $color;
    border-width: ($height / 2) 0 ($height / 2) $width;
  }

  @if $direction == down {
    border-color: $color transparent transparent transparent;
    border-width: $height ($width / 2) 0 ($width / 2);
  }

  @if $direction == left {
    border-color: transparent $color transparent transparent;
    border-width: ($height / 2) $width ($height / 2) 0;
  }

  @if $direction == upper-left {
    border-color: $color transparent transparent transparent;
    border-width: $height $height 0 0;
  }

  @if $direction == upper-right {
    border-color: transparent $color transparent transparent;
    border-width: 0 $height $height 0;
  }

  @if $direction == lower-right {
    border-color: transparent transparent $color transparent;
    border-width: 0 0 $height $height;
  }

  @if $direction == lower-left {
    border-color: transparent transparent transparent $color;
    border-width: $height 0 0 $height;
  }
}

//カードアイテムn枚並び
@mixin card-row($n: 3, $mr: 2rem, $mt: 2rem, $mt-sp: 1rem) {
  width: calc((100% / #{$n}) - #{$mr} * #{$n - 1} / #{$n});
  margin-right: $mr;

  &:nth-child(#{$n}n) {
    margin-right: 0;
  }

  &:nth-child(n + #{$n + 1}) {
    margin-top: $mt;
  }

  @include mq("sp") {
    width: 100%;
    margin: 0;

    &:not(:first-child) {
      margin-top: $mt-sp;
    }
  }
}

$initType: "flex";
@mixin flex($type: $initType) {
  //共通スタイル
  display: flex;

  @if ($type == "flex") {
    //スタイル
  } @else if($type == "between") {
    justify-content: space-between;
  } @else if($type == "around") {
    justify-content: space-around;
  } @else if($type == "center") {
    justify-content: center;
  } @else if ($type == "wrap") {
    flex-wrap: wrap;
  } @else if ($type == "cc") {
    justify-content: center;
    align-items: center;
  }
}

//インナー幅いっぱい
@mixin full-layout($inner: "out") {
  @if ($inner == "out") {
    width: 100vw;
    margin-left: calc(50% - 50vw);
  } @else if ($inner == "in") {
    width: 100vw;
    margin-left: calc(50% - 50vw);
    padding-left: calc(50vw - 50%);
    padding-right: calc(50vw - 50%);
  }
}

//片側のみインナー幅いっぱい
$direction: "right-out";
@mixin direction-full-layout($type: $direction) {
  //共通スタイル
  width: calc(50vw + 50%);

  @if ($type == "right-out") {
    //スタイル
  } @else if ($type == "right-in") {
    padding-right: calc(50vw - 50%);
  } @else if ($type == "left-out") {
    margin-left: calc(50% - 50vw);
  } @else if ($type == "left-in") {
    margin-left: calc(50% - 50vw);
    padding-left: calc(50vw - 50%);
  }
}


//ホバーアクション
@mixin hover() {
  @include mq('hover') {
    &:hover {
      opacity: $opacity;
    }
  }
}